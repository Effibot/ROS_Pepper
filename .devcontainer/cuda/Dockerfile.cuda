# FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04 AS base
FROM nvidia/cudagl:11.4.0-runtime-ubuntu20.04 AS base

# Set up environment
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS1_DISTRO noetic
ENV ROS2_DISTRO foxy
ENV ROS1_INSTALL_PATH=/opt/ros/noetic
ENV ROS2_INSTALL_PATH=/opt/ros/foxy
ENV AMENT_PREFIX_PATH=/opt/ros/foxy
ENV COLCON_PREFIX_PATH=/opt/ros/foxy
ENV ROS_PYTHON_VERSION=3
ENV EDITOR=nano

# Install language
RUN apt update && apt install -y \
        locales \
        && locale-gen en_US.UTF-8 \
        && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
        && rm -rf /var/lib/apt/lists/*
ENV LANG en_US.UTF-8

# Install timezone
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \
        && export DEBIAN_FRONTEND=noninteractive \
        && apt update \
        && apt install -y tzdata \
        && dpkg-reconfigure --frontend noninteractive tzdata \
        && rm -rf /var/lib/apt/lists/*

RUN apt update && apt install -y software-properties-common  \
        && add-apt-repository universe \
        && apt update && apt -y full-upgrade \
        && rm -rf /var/lib/apt/lists/*

# Install common programs
RUN apt update && apt install -y \
        apt-utils \
        bash-completion \
        bat \
        build-essential \
        cmake \
        curl \
        fzf \
        g++ \
        gcc \
        gdb \
        git \
        git-core \
        git-lfs \
        gnupg2 \
        libbz2-dev \
        lsb-release \
        nano \
        openssh-client \
        sudo \
        software-properties-common \
        wget \
        unzip \
        && rm -rf /var/lib/apt/lists/*

################
# Expose the nvidia driver to allow opengl rendering.
# Dependencies for glvnd and X11.
################
RUN apt update \
        && apt install -y -qq --no-install-recommends \
        libglvnd0 \
        libgl1 \
        libglx0 \
        libegl1 \
        libxext6 \
        libx11-6

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QT_X11_NO_MITSHM 1

# Install ROS1 - Noetic
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
        && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - \
        && apt update && apt install -y \
        ros-noetic-desktop-full \
        && rm -rf /var/lib/apt/lists/*

# Install ROS2 - Foxy
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null \
        && apt update && apt install -y \
        ros-foxy-desktop \
        ros-foxy-gazebo* \
        && rm -rf /var/lib/apt/lists/*

# Install additional packages
RUN apt update && apt install --fix-missing -y \
        python-dev \
        python3-dev \
        python3-colcon-common-extensions \
        python3-catkin-tools \
        python3-osrf-pycommon \
        python3-rosdep \
        python3-rosinstall \
        python3-rosinstall-generator \
        python3-vcstool \
        python3-virtualenv \
        python3-wstool \
        python3-pip \
        python3-pep8 \
        python3-autopep8 \
        python-yaml \
        pylint3 \
        ros-dev-tools \
        && rm -rf /var/lib/apt/lists/*

# Create a non-root user
ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=$USER_UID
ENV HOME=/home/$USERNAME
RUN groupadd --gid $USER_GID $USERNAME \
        && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
        # Add sudo support for the non-root user
        && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
        && chmod 0440 /etc/sudoers.d/$USERNAME \
        # Add support for XDG_RUNTIME_DIR
        && mkdir -m 0700 -p /run/user/$USER_UID \
        && chown $USER_UID:$USER_GID /run/user/$USER_UID

# Set up autocompletion for user
RUN apt-get update && apt-get install -y git-core bash-completion \
        && rm -rf /var/lib/apt/lists/*

# change user
USER $USERNAME

# Install ZSH
COPY --chown=$USER_UID:$USER_UID ./config/zsh_docker.sh $HOME
RUN cd $HOME && chmod +x zsh_docker.sh && ./zsh_docker.sh \
        -p git \
        -p git-extras \
        -p git-flow \
        -p command-not-found \
        -p colorize \
        -p common-aliases \
        -p sudo \
        -p https://github.com/changyuheng/zsh-interactive-cd \
        -p https://github.com/chrissicool/zsh-256color \
        -p https://github.com/zsh-users/zsh-autosuggestions \
        -p https://github.com/zsh-users/zsh-completions \
        -p https://github.com/zshzoo/cd-ls \
        -p https://github.com/zdharma-continuum/fast-syntax-highlighting \
        -a "set CD_LS_COMMAND=lsd" \
        && rm -f $HOME/zsh_docker.sh

# Install LSD for ls substitute
RUN wget https://github.com/Peltoche/lsd/releases/download/0.23.1/lsd_0.23.1_amd64.deb -P /tmp && \
        sudo dpkg -i /tmp/lsd_0.23.1_amd64.deb && \
        rm /tmp/lsd_0.23.1_amd64.deb

# install pip2
RUN wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -P /tmp && \
        sudo python2 /tmp/get-pip.py

# ------------------- #

ENV VENVS=$HOME/venvs
ENV NAOQI=$HOME/naoqi
ENV PYTHONPATH=$NAOQI/pynaoqi/lib/python2.7/site-packages:$PYTHONPATH

# Create virtual environment
RUN virtualenv --system-site-packages -p python2.7 ${VENVS}/py27 && \
        # update pip and install basic things on python2.7
        ./${VENVS}/py27/bin/python -m pip install --user --no-cache-dir --upgrade pip && \
        ./${VENVS}/py27/bin/python -m pip install --user --no-cache-dir --upgrade \
        numpy scipy matplotlib pbr autopep8==1.6.0 pylint pandas joblib opencv-contrib-python==4.2.0.32

# download and install NAOqi SDK
RUN mkdir $HOME/naoqi && \
        wget https://community-static.aldebaran.com/resources/2.5.10/Python%20SDK/pynaoqi-python2.7-2.5.7.1-linux64.tar.gz -P /tmp && \
        wget https://community-static.aldebaran.com/resources/2.5.10/NAOqi%20SDK/naoqi-sdk-2.5.7.1-linux64.tar.gz -P /tmp && \
        tar -xvzf /tmp/pynaoqi-python2.7-* -C $NAOQI && mv $NAOQI/pynaoqi-* $NAOQI/pynaoqi && \
        tar -xvzf /tmp/naoqi-sdk-* -C $NAOQI && mv $NAOQI/naoqi-sdk-* $NAOQI/naoqi-sdk && \
        rm -rf /tmp/pynaoqi-python2.7-* && \
        rm -rf /tmp/naoqi-sdk-*

# Initialize ROS depedencies
RUN sudo $(which rosdep) init && rosdep update --include-eol-distros && \
        sudo apt update \
        && apt list --upgradable | tail -n +2 | awk -F'/' '{print $1}' | \
        xargs -r sudo apt upgrade -y --allow-change-held-packages

# Intall python packages
ENV PATH=$PATH:$HOME/.local/bin
RUN pip install -U --no-cache-dir numpy matplotlib plotly opencv-contrib-python
RUN pip2 install -U --no-cache-dir numpy matplotlib rospkg opencv-contrib-python qibuild

# Setup qi toolchain for naoqi
RUN cd $CATKIN_WS && echo '1\n\1\n' | ~/.local/bin/qibuild config --wizard \
        && qibuild init && cd $NAOQI/naoqi-sdk \
        && qitoolchain create mytoolchain toolchain.xml \
        && cd $CATKIN_WS && qibuild add-config myconfig -t mytoolchain --default

# Install Additional ROS1 packages
RUN zsh -c "source /opt/ros/noetic/setup.zsh \
        && sudo apt update \
        && sudo apt install -y \
        ros-noetic-moveit-ros \
        ros-noetic-navigation \
        ros-noetic-slam-toolbox \
        ros-noetic-slam-gmapping \
        ros-noetic-robot-localization \
        ros-noetic-rtabmap-ros \
        ros-noetic-rqt\* \
        ros-noetic-moveit \
        ros-noetic-moveit-ros \
        ros-noetic-moveit-planners \
        ros-noetic-pointcloud-to-laserscan \
        ros-noetic-ddynamic-reconfigure \
        ros-noetic-ddynamic-reconfigure-python \
        ros-noetic-naoqi-libqi \
        ros-noetic-naoqi-libqicore \
        ros-noetic-topic-tools"

# Install additional ROS2 packages
RUN zsh -c "source /opt/ros/foxy/setup.zsh \
        && sudo apt update \
        && sudo apt install -y \
        ros-foxy-moveit \
        ros-foxy-navigation2 \
        ros-foxy-slam-toolbox \
        ros-foxy-rtabmap-ros \
        ros-foxy-robot-localization \
        ros-foxy-rqt\* \
        ros-foxy-moveit \
        ros-foxy-moveit-ros \
        ros-foxy-move-base-msgs \
        ros-foxy-naoqi-libqi \
        ros-foxy-pointcloud-to-laserscan"

# Install Pepper Meshes for ros1
RUN echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections \
        && echo 'ros-pepper-meshes ros-pepper-meshes/accepted-ros-pepper-meshes boolean true' | \
        sudo debconf-set-selections \
        && sudo apt update && sudo apt install -y ros-noetic-pepper-meshes \
        && sudo rm -rf /var/lib/apt/lists/*

# Prepare catkin workspace
ENV CATKIN_WS=/home/$USERNAME/catkin_ws
RUN mkdir -p /home/$USERNAME/catkin_ws/src \
        && chown -R $USERNAME:$USERNAME /home/$USERNAME/catkin_ws
# Initialize catkin workspace and build desired packages
COPY --chown=$USER_UID:$USER_UID ./config/ros1.repos $CATKIN_WS/src
RUN sudo apt update && cd $CATKIN_WS \
        && vcs import < src/ros1.repos src\
        && rosdep install --from-paths src --ignore-src -y --rosdistro ${ROS1_DISTRO} \
        && zsh -c "source /opt/ros/noetic/setup.zsh && catkin build" \
        && rm -rf src/ros1.repos

# Unset
ENV ROS_DISTRO=
ENV CMAKE_PREFIX_PATH=
# Prepare colcon workspace
ENV COLCON_WS=/home/$USERNAME/colcon_ws
RUN mkdir -p /home/$USERNAME/colcon_ws/src \
        && chown -R $USERNAME:$USERNAME /home/$USERNAME/colcon_ws
# Initialize colcon workspace and build desired packages
COPY --chown=$USER_UID:$USER_UID ./config/ros2.repos $COLCON_WS/src
RUN sudo apt update && cd $COLCON_WS \
        && vcs import < src/ros2.repos src\
        && rosdep install --from-paths src --ignore-src -y --rosdistro ${ROS2_DISTRO} \
        && zsh -c 'source /opt/ros/foxy/setup.zsh \
        && colcon build --merge-install --symlink-install \
        --cmake-args "-DCMAKE_BUILD_TYPE=RelWithDebInfo" \
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=On" -Wall -Wextra -Wpedantic'\
        && rm -rf src/ros2.repos

# Unset
ENV ROS_DISTRO=
ENV CMAKE_PREFIX_PATH=
# Prepare ros1_bridge workspace
ENV BRIDGE_WS=/home/$USERNAME/bridge_ws
RUN mkdir -p /home/$USERNAME/bridge_ws/src \
        && chown -R $USERNAME:$USERNAME /home/$USERNAME/bridge_ws
# Initialize ros1_bridge workspace and build desired packages
COPY --chown=$USER_UID:$USER_UID ./config/bridge.repos $BRIDGE_WS/src
RUN cd $BRIDGE_WS && vcs import < src/bridge.repos src \
        && rosdep install --from-paths src --ignore-src -y --rosdistro ${ROS2_DISTRO}\
        # Build packages to be bridged (custom msgs) *before* building the bridge
        && cd $BRIDGE_WS && colcon build --symlink-install --packages-skip ros1_bridge \
        && rm -rf src/bridge.repos
# Build the ros bridge, which now searches paths to connect custom msgs ros1 <-> ros2 in path of installed pkgs (sourced)
RUN cd $BRIDGE_WS \
        # remove controller-manager-msgs package to avoid known error (issue 329 on github)
        && sudo dpkg -r --force-depends ros-noetic-controller-manager-msgs ros-noetic-rtabmap-msgs ros-noetic-moveit-msgs\
        && zsh -c "source /opt/ros/noetic/setup.zsh && source /opt/ros/foxy/setup.zsh \
        && source $CATKIN_WS/devel/local_setup.zsh \
        && source $COLCON_WS/install/local_setup.zsh \
        && colcon build --symlink-install --packages-select ros1_bridge --cmake-force-configure \
        --event-handlers console_direct+ --cmake-args -DBUILD_TESTING=FALSE" \
        # Reinstall controller-manager-msgs package fixing broken dependencies
        && sudo apt update && sudo apt --fix-broken install -y

# Clean up
RUN sudo apt autoremove -y && sudo apt clean -y && sudo rm -rf /var/lib/apt/lists/*

# Entry point
ENV DEBIAN_FRONTEND=dialog
WORKDIR /home/$USERNAME
CMD ["/bin/zsh"]